
LoRaOled-Transmiter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003250  08003250  00020410  2**0
                  CONTENTS
  4 .ARM          00000008  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003258  08003258  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  08003260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000410  08003670  00020410  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08003670  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000824f  00000000  00000000  00020439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ea  00000000  00000000  00028688  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  00029e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000144b6  00000000  00000000  0002ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069b1  00000000  00000000  0003f116  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b0de  00000000  00000000  00045ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000b0c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000410 	.word	0x20000410
 800012c:	00000000 	.word	0x00000000
 8000130:	080031b4 	.word	0x080031b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000414 	.word	0x20000414
 800014c:	080031b4 	.word	0x080031b4

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000164:	f000 b974 	b.w	8000450 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	468c      	mov	ip, r1
 8000186:	4604      	mov	r4, r0
 8000188:	9e08      	ldr	r6, [sp, #32]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d14b      	bne.n	8000226 <__udivmoddi4+0xa6>
 800018e:	428a      	cmp	r2, r1
 8000190:	4615      	mov	r5, r2
 8000192:	d967      	bls.n	8000264 <__udivmoddi4+0xe4>
 8000194:	fab2 f282 	clz	r2, r2
 8000198:	b14a      	cbz	r2, 80001ae <__udivmoddi4+0x2e>
 800019a:	f1c2 0720 	rsb	r7, r2, #32
 800019e:	fa01 f302 	lsl.w	r3, r1, r2
 80001a2:	fa20 f707 	lsr.w	r7, r0, r7
 80001a6:	4095      	lsls	r5, r2
 80001a8:	ea47 0c03 	orr.w	ip, r7, r3
 80001ac:	4094      	lsls	r4, r2
 80001ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001b2:	fbbc f7fe 	udiv	r7, ip, lr
 80001b6:	fa1f f885 	uxth.w	r8, r5
 80001ba:	fb0e c317 	mls	r3, lr, r7, ip
 80001be:	fb07 f908 	mul.w	r9, r7, r8
 80001c2:	0c21      	lsrs	r1, r4, #16
 80001c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001c8:	4599      	cmp	r9, r3
 80001ca:	d909      	bls.n	80001e0 <__udivmoddi4+0x60>
 80001cc:	18eb      	adds	r3, r5, r3
 80001ce:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80001d2:	f080 811c 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001d6:	4599      	cmp	r9, r3
 80001d8:	f240 8119 	bls.w	800040e <__udivmoddi4+0x28e>
 80001dc:	3f02      	subs	r7, #2
 80001de:	442b      	add	r3, r5
 80001e0:	eba3 0309 	sub.w	r3, r3, r9
 80001e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80001e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80001ec:	fb00 f108 	mul.w	r1, r0, r8
 80001f0:	b2a4      	uxth	r4, r4
 80001f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001f6:	42a1      	cmp	r1, r4
 80001f8:	d909      	bls.n	800020e <__udivmoddi4+0x8e>
 80001fa:	192c      	adds	r4, r5, r4
 80001fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000200:	f080 8107 	bcs.w	8000412 <__udivmoddi4+0x292>
 8000204:	42a1      	cmp	r1, r4
 8000206:	f240 8104 	bls.w	8000412 <__udivmoddi4+0x292>
 800020a:	3802      	subs	r0, #2
 800020c:	442c      	add	r4, r5
 800020e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000212:	2700      	movs	r7, #0
 8000214:	1a64      	subs	r4, r4, r1
 8000216:	b11e      	cbz	r6, 8000220 <__udivmoddi4+0xa0>
 8000218:	2300      	movs	r3, #0
 800021a:	40d4      	lsrs	r4, r2
 800021c:	e9c6 4300 	strd	r4, r3, [r6]
 8000220:	4639      	mov	r1, r7
 8000222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000226:	428b      	cmp	r3, r1
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0xbe>
 800022a:	2e00      	cmp	r6, #0
 800022c:	f000 80ec 	beq.w	8000408 <__udivmoddi4+0x288>
 8000230:	2700      	movs	r7, #0
 8000232:	e9c6 0100 	strd	r0, r1, [r6]
 8000236:	4638      	mov	r0, r7
 8000238:	4639      	mov	r1, r7
 800023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023e:	fab3 f783 	clz	r7, r3
 8000242:	2f00      	cmp	r7, #0
 8000244:	d148      	bne.n	80002d8 <__udivmoddi4+0x158>
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__udivmoddi4+0xd0>
 800024a:	4282      	cmp	r2, r0
 800024c:	f200 80fb 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 8000250:	1a84      	subs	r4, r0, r2
 8000252:	eb61 0303 	sbc.w	r3, r1, r3
 8000256:	2001      	movs	r0, #1
 8000258:	469c      	mov	ip, r3
 800025a:	2e00      	cmp	r6, #0
 800025c:	d0e0      	beq.n	8000220 <__udivmoddi4+0xa0>
 800025e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000262:	e7dd      	b.n	8000220 <__udivmoddi4+0xa0>
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xe8>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	2a00      	cmp	r2, #0
 800026e:	f040 808f 	bne.w	8000390 <__udivmoddi4+0x210>
 8000272:	2701      	movs	r7, #1
 8000274:	1b49      	subs	r1, r1, r5
 8000276:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800027a:	fa1f f985 	uxth.w	r9, r5
 800027e:	fbb1 fef8 	udiv	lr, r1, r8
 8000282:	fb08 111e 	mls	r1, r8, lr, r1
 8000286:	fb09 f00e 	mul.w	r0, r9, lr
 800028a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800028e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d907      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000296:	18eb      	adds	r3, r5, r3
 8000298:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4298      	cmp	r0, r3
 80002a0:	f200 80cd 	bhi.w	800043e <__udivmoddi4+0x2be>
 80002a4:	468e      	mov	lr, r1
 80002a6:	1a1b      	subs	r3, r3, r0
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	fb09 f900 	mul.w	r9, r9, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ba:	45a1      	cmp	r9, r4
 80002bc:	d907      	bls.n	80002ce <__udivmoddi4+0x14e>
 80002be:	192c      	adds	r4, r5, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x14c>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f200 80b6 	bhi.w	8000438 <__udivmoddi4+0x2b8>
 80002cc:	4618      	mov	r0, r3
 80002ce:	eba4 0409 	sub.w	r4, r4, r9
 80002d2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002d6:	e79e      	b.n	8000216 <__udivmoddi4+0x96>
 80002d8:	f1c7 0520 	rsb	r5, r7, #32
 80002dc:	40bb      	lsls	r3, r7
 80002de:	fa22 fc05 	lsr.w	ip, r2, r5
 80002e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e6:	fa21 f405 	lsr.w	r4, r1, r5
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fbb4 f9fe 	udiv	r9, r4, lr
 80002f2:	fa1f f88c 	uxth.w	r8, ip
 80002f6:	fb0e 4419 	mls	r4, lr, r9, r4
 80002fa:	fa20 f305 	lsr.w	r3, r0, r5
 80002fe:	40b9      	lsls	r1, r7
 8000300:	fb09 fa08 	mul.w	sl, r9, r8
 8000304:	4319      	orrs	r1, r3
 8000306:	0c0b      	lsrs	r3, r1, #16
 8000308:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800030c:	45a2      	cmp	sl, r4
 800030e:	fa02 f207 	lsl.w	r2, r2, r7
 8000312:	fa00 f307 	lsl.w	r3, r0, r7
 8000316:	d90b      	bls.n	8000330 <__udivmoddi4+0x1b0>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000320:	f080 8088 	bcs.w	8000434 <__udivmoddi4+0x2b4>
 8000324:	45a2      	cmp	sl, r4
 8000326:	f240 8085 	bls.w	8000434 <__udivmoddi4+0x2b4>
 800032a:	f1a9 0902 	sub.w	r9, r9, #2
 800032e:	4464      	add	r4, ip
 8000330:	eba4 040a 	sub.w	r4, r4, sl
 8000334:	fbb4 f0fe 	udiv	r0, r4, lr
 8000338:	fb0e 4410 	mls	r4, lr, r0, r4
 800033c:	fb00 fa08 	mul.w	sl, r0, r8
 8000340:	b289      	uxth	r1, r1
 8000342:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000346:	45a2      	cmp	sl, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000352:	d26b      	bcs.n	800042c <__udivmoddi4+0x2ac>
 8000354:	45a2      	cmp	sl, r4
 8000356:	d969      	bls.n	800042c <__udivmoddi4+0x2ac>
 8000358:	3802      	subs	r0, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000360:	fba0 8902 	umull	r8, r9, r0, r2
 8000364:	eba4 040a 	sub.w	r4, r4, sl
 8000368:	454c      	cmp	r4, r9
 800036a:	4641      	mov	r1, r8
 800036c:	46ce      	mov	lr, r9
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d069      	beq.n	800044a <__udivmoddi4+0x2ca>
 8000376:	1a5a      	subs	r2, r3, r1
 8000378:	eb64 040e 	sbc.w	r4, r4, lr
 800037c:	fa04 f505 	lsl.w	r5, r4, r5
 8000380:	fa22 f307 	lsr.w	r3, r2, r7
 8000384:	40fc      	lsrs	r4, r7
 8000386:	431d      	orrs	r5, r3
 8000388:	e9c6 5400 	strd	r5, r4, [r6]
 800038c:	2700      	movs	r7, #0
 800038e:	e747      	b.n	8000220 <__udivmoddi4+0xa0>
 8000390:	4095      	lsls	r5, r2
 8000392:	f1c2 0320 	rsb	r3, r2, #32
 8000396:	fa21 f003 	lsr.w	r0, r1, r3
 800039a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800039e:	fbb0 f7f8 	udiv	r7, r0, r8
 80003a2:	fa1f f985 	uxth.w	r9, r5
 80003a6:	fb08 0017 	mls	r0, r8, r7, r0
 80003aa:	fa24 f303 	lsr.w	r3, r4, r3
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fb07 fc09 	mul.w	ip, r7, r9
 80003b4:	430b      	orrs	r3, r1
 80003b6:	0c19      	lsrs	r1, r3, #16
 80003b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003bc:	458c      	cmp	ip, r1
 80003be:	fa04 f402 	lsl.w	r4, r4, r2
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x254>
 80003c4:	1869      	adds	r1, r5, r1
 80003c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003ca:	d231      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 80003cc:	458c      	cmp	ip, r1
 80003ce:	d92f      	bls.n	8000430 <__udivmoddi4+0x2b0>
 80003d0:	3f02      	subs	r7, #2
 80003d2:	4429      	add	r1, r5
 80003d4:	eba1 010c 	sub.w	r1, r1, ip
 80003d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003dc:	fb08 1c10 	mls	ip, r8, r0, r1
 80003e0:	fb00 fe09 	mul.w	lr, r0, r9
 80003e4:	b299      	uxth	r1, r3
 80003e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x27e>
 80003ee:	1869      	adds	r1, r5, r1
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d218      	bcs.n	8000428 <__udivmoddi4+0x2a8>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d916      	bls.n	8000428 <__udivmoddi4+0x2a8>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4429      	add	r1, r5
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4637      	mov	r7, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e708      	b.n	8000220 <__udivmoddi4+0xa0>
 800040e:	460f      	mov	r7, r1
 8000410:	e6e6      	b.n	80001e0 <__udivmoddi4+0x60>
 8000412:	4618      	mov	r0, r3
 8000414:	e6fb      	b.n	800020e <__udivmoddi4+0x8e>
 8000416:	4543      	cmp	r3, r8
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb8 0102 	subs.w	r1, r8, r2
 800041e:	eb69 020c 	sbc.w	r2, r9, ip
 8000422:	3801      	subs	r0, #1
 8000424:	4696      	mov	lr, r2
 8000426:	e7a4      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000428:	4618      	mov	r0, r3
 800042a:	e7e8      	b.n	80003fe <__udivmoddi4+0x27e>
 800042c:	4608      	mov	r0, r1
 800042e:	e795      	b.n	800035c <__udivmoddi4+0x1dc>
 8000430:	4607      	mov	r7, r0
 8000432:	e7cf      	b.n	80003d4 <__udivmoddi4+0x254>
 8000434:	4681      	mov	r9, r0
 8000436:	e77b      	b.n	8000330 <__udivmoddi4+0x1b0>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	e747      	b.n	80002ce <__udivmoddi4+0x14e>
 800043e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000442:	442b      	add	r3, r5
 8000444:	e72f      	b.n	80002a6 <__udivmoddi4+0x126>
 8000446:	4638      	mov	r0, r7
 8000448:	e707      	b.n	800025a <__udivmoddi4+0xda>
 800044a:	4637      	mov	r7, r6
 800044c:	e6e8      	b.n	8000220 <__udivmoddi4+0xa0>
 800044e:	bf00      	nop

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop

08000454 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__attribute__((weak)) void SX1278_hw_init(SX1278_hw_t * hw) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800045c:	2101      	movs	r1, #1
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f80d 	bl	800047e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6858      	ldr	r0, [r3, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	b29b      	uxth	r3, r3
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	f001 f984 	bl	800177e <HAL_GPIO_WritePin>
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <SX1278_hw_SetNSS>:

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 800047e:	b580      	push	{r7, lr}
 8000480:	b082      	sub	sp, #8
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6958      	ldr	r0, [r3, #20]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	b299      	uxth	r1, r3
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	bf0c      	ite	eq
 8000498:	2301      	moveq	r3, #1
 800049a:	2300      	movne	r3, #0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	f001 f96d 	bl	800177e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SX1278_hw_Reset>:

__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80004b4:	2101      	movs	r1, #1
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ffe1 	bl	800047e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6858      	ldr	r0, [r3, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	f001 f958 	bl	800177e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 f855 	bl	800057e <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6858      	ldr	r0, [r3, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	f001 f94c 	bl	800177e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f000 f849 	bl	800057e <SX1278_hw_DelayMs>
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <SX1278_hw_SPICommand>:

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000500:	2100      	movs	r1, #0
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff ffbb 	bl	800047e <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6998      	ldr	r0, [r3, #24]
 800050c:	1cf9      	adds	r1, r7, #3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	2201      	movs	r2, #1
 8000514:	f001 fd97 	bl	8002046 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000518:	bf00      	nop
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f959 	bl	80027d6 <HAL_SPI_GetState>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d1f7      	bne.n	800051a <SX1278_hw_SPICommand+0x26>
		;
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <SX1278_hw_SPIReadByte>:

__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af02      	add	r7, sp, #8
 8000538:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800053e:	2300      	movs	r3, #0
 8000540:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000542:	2100      	movs	r1, #0
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ff9a 	bl	800047e <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6998      	ldr	r0, [r3, #24]
 800054e:	f107 020e 	add.w	r2, r7, #14
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2301      	movs	r3, #1
 800055e:	f001 fea6 	bl	80022ae <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000562:	bf00      	nop
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4618      	mov	r0, r3
 800056a:	f002 f934 	bl	80027d6 <HAL_SPI_GetState>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d1f7      	bne.n	8000564 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <SX1278_hw_DelayMs>:

__attribute__((weak)) void SX1278_hw_DelayMs(uint32_t msec) {
 800057e:	b580      	push	{r7, lr}
 8000580:	b082      	sub	sp, #8
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 fde2 	bl	8001150 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	4610      	mov	r0, r2
 80005aa:	f001 f8d1 	bl	8001750 <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	bf0c      	ite	eq
 80005b4:	2301      	moveq	r3, #1
 80005b6:	2300      	movne	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	78fa      	ldrb	r2, [r7, #3]
 80005d4:	4611      	mov	r1, r2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff8c 	bl	80004f4 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffa6 	bl	8000532 <SX1278_hw_SPIReadByte>
 80005e6:	4603      	mov	r3, r0
 80005e8:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff44 	bl	800047e <SX1278_hw_SetNSS>
	return tmp;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
 800060c:	4613      	mov	r3, r2
 800060e:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff31 	bl	800047e <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000626:	b2db      	uxtb	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	4610      	mov	r0, r2
 800062c:	f7ff ff62 	bl	80004f4 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	78ba      	ldrb	r2, [r7, #2]
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff5b 	bl	80004f4 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2101      	movs	r1, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff1a 	bl	800047e <SX1278_hw_SetNSS>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	461a      	mov	r2, r3
 800065e:	460b      	mov	r3, r1
 8000660:	72fb      	strb	r3, [r7, #11]
 8000662:	4613      	mov	r3, r2
 8000664:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000666:	7abb      	ldrb	r3, [r7, #10]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d929      	bls.n	80006c0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff03 	bl	800047e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	7afb      	ldrb	r3, [r7, #11]
 800067e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	4610      	mov	r0, r2
 8000688:	f7ff ff34 	bl	80004f4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
 8000690:	e00b      	b.n	80006aa <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	f7ff ff28 	bl	80004f4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	3301      	adds	r3, #1
 80006a8:	75fb      	strb	r3, [r7, #23]
 80006aa:	7dfa      	ldrb	r2, [r7, #23]
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3ef      	bcc.n	8000692 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fee0 	bl	800047e <SX1278_hw_SetNSS>
 80006be:	e000      	b.n	80006c2 <SX1278_SPIBurstWrite+0x70>
		return;
 80006c0:	bf00      	nop
	}
}
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af04      	add	r7, sp, #16
 80006ce:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f103 0408 	add.w	r4, r3, #8
 80006d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7c12      	ldrb	r2, [r2, #16]
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	7c49      	ldrb	r1, [r1, #17]
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	7c80      	ldrb	r0, [r0, #18]
 80006e6:	9002      	str	r0, [sp, #8]
 80006e8:	9101      	str	r1, [sp, #4]
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4623      	mov	r3, r4
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f805 	bl	8000700 <SX1278_config>
			module->LoRa_BW);
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd90      	pop	{r4, r7, pc}
	...

08000700 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f000 f8e3 	bl	80008d8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000712:	200f      	movs	r0, #15
 8000714:	f7ff ff33 	bl	800057e <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f8ed 	bl	80008f8 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800071e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	f04f 0100 	mov.w	r1, #0
 800072a:	04e1      	lsls	r1, r4, #19
 800072c:	ea41 3153 	orr.w	r1, r1, r3, lsr #13
 8000730:	04d8      	lsls	r0, r3, #19
 8000732:	4a5c      	ldr	r2, [pc, #368]	; (80008a4 <SX1278_config+0x1a4>)
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	f7ff fd0a 	bl	8000150 <__aeabi_uldivmod>
 800073c:	4603      	mov	r3, r0
 800073e:	460c      	mov	r4, r1
 8000740:	e9c7 3406 	strd	r3, r4, [r7, #24]
	uint8_t Frequency_to_device[3] = { 0x6C, 0x80, 0x00 }; //434MHz
 8000744:	4a58      	ldr	r2, [pc, #352]	; (80008a8 <SX1278_config+0x1a8>)
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	8019      	strh	r1, [r3, #0]
 8000750:	3302      	adds	r3, #2
 8000752:	0c12      	lsrs	r2, r2, #16
 8000754:	701a      	strb	r2, [r3, #0]

	Frequency_to_device[0] = (uint8_t)(frf >> 16);
 8000756:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	f04f 0400 	mov.w	r4, #0
 8000762:	0c0b      	lsrs	r3, r1, #16
 8000764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000768:	0c14      	lsrs	r4, r2, #16
 800076a:	b2db      	uxtb	r3, r3
 800076c:	753b      	strb	r3, [r7, #20]
	Frequency_to_device[1] = (uint8_t)(frf >> 8);
 800076e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	f04f 0400 	mov.w	r4, #0
 800077a:	0a0b      	lsrs	r3, r1, #8
 800077c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000780:	0a14      	lsrs	r4, r2, #8
 8000782:	b2db      	uxtb	r3, r3
 8000784:	757b      	strb	r3, [r7, #21]
	Frequency_to_device[2] = (uint8_t)(frf >> 0);
 8000786:	7e3b      	ldrb	r3, [r7, #24]
 8000788:	75bb      	strb	r3, [r7, #22]

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 800078a:	f107 0214 	add.w	r2, r7, #20
 800078e:	2303      	movs	r3, #3
 8000790:	2106      	movs	r1, #6
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f7ff ff5d 	bl	8000652 <SX1278_SPIBurstWrite>
			(uint8_t*) Frequency_to_device, 3); //setting  frequency parameter

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8000798:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800079c:	4a43      	ldr	r2, [pc, #268]	; (80008ac <SX1278_config+0x1ac>)
 800079e:	5cd3      	ldrb	r3, [r2, r3]
 80007a0:	461a      	mov	r2, r3
 80007a2:	2109      	movs	r1, #9
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f7ff ff2b 	bl	8000600 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80007aa:	220b      	movs	r2, #11
 80007ac:	210b      	movs	r1, #11
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f7ff ff26 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80007b4:	2223      	movs	r2, #35	; 0x23
 80007b6:	210c      	movs	r1, #12
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff ff21 	bl	8000600 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80007be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <SX1278_config+0x1b0>)
 80007c4:	5cd3      	ldrb	r3, [r2, r3]
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d133      	bne.n	8000832 <SX1278_config+0x132>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80007ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80007ce:	4a39      	ldr	r2, [pc, #228]	; (80008b4 <SX1278_config+0x1b4>)
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007d6:	3303      	adds	r3, #3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	211d      	movs	r1, #29
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff ff0e 	bl	8000600 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80007e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <SX1278_config+0x1b0>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007f0:	3307      	adds	r3, #7
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	211e      	movs	r1, #30
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff ff01 	bl	8000600 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80007fe:	2131      	movs	r1, #49	; 0x31
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f7ff fede 	bl	80005c2 <SX1278_SPIRead>
 8000806:	4603      	mov	r3, r0
 8000808:	75fb      	strb	r3, [r7, #23]
		tmp &= 0xF8;
 800080a:	7dfb      	ldrb	r3, [r7, #23]
 800080c:	f023 0307 	bic.w	r3, r3, #7
 8000810:	75fb      	strb	r3, [r7, #23]
		tmp |= 0x05;
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	f043 0305 	orr.w	r3, r3, #5
 8000818:	75fb      	strb	r3, [r7, #23]
		SX1278_SPIWrite(module, 0x31, tmp);
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	461a      	mov	r2, r3
 800081e:	2131      	movs	r1, #49	; 0x31
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f7ff feed 	bl	8000600 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000826:	220c      	movs	r2, #12
 8000828:	2137      	movs	r1, #55	; 0x37
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff fee8 	bl	8000600 <SX1278_SPIWrite>
 8000830:	e019      	b.n	8000866 <SX1278_config+0x166>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000832:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000836:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <SX1278_config+0x1b4>)
 8000838:	5cd3      	ldrb	r3, [r2, r3]
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800083e:	3302      	adds	r3, #2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	211d      	movs	r1, #29
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff feda 	bl	8000600 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800084c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000850:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <SX1278_config+0x1b0>)
 8000852:	5cd3      	ldrb	r3, [r2, r3]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000858:	3307      	adds	r3, #7
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	211e      	movs	r1, #30
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff fecd 	bl	8000600 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	211f      	movs	r1, #31
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff fec8 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000870:	2200      	movs	r2, #0
 8000872:	2120      	movs	r1, #32
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fec3 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 800087a:	220c      	movs	r2, #12
 800087c:	2121      	movs	r1, #33	; 0x21
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff febe 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000884:	2201      	movs	r2, #1
 8000886:	2141      	movs	r1, #65	; 0x41
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff feb9 	bl	8000600 <SX1278_SPIWrite>
	module->readBytes = 0;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	SX1278_standby(module); //Entry standby mode
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f000 f80e 	bl	80008b8 <SX1278_standby>
}
 800089c:	bf00      	nop
 800089e:	3724      	adds	r7, #36	; 0x24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	01e84800 	.word	0x01e84800
 80008a8:	080031cc 	.word	0x080031cc
 80008ac:	080031f4 	.word	0x080031f4
 80008b0:	080031f8 	.word	0x080031f8
 80008b4:	08003200 	.word	0x08003200

080008b8 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80008c0:	2209      	movs	r2, #9
 80008c2:	2101      	movs	r1, #1
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fe9b 	bl	8000600 <SX1278_SPIWrite>
	module->status = STANDBY;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	751a      	strb	r2, [r3, #20]
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80008e0:	2208      	movs	r2, #8
 80008e2:	2101      	movs	r1, #1
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fe8b 	bl	8000600 <SX1278_SPIWrite>
	module->status = SLEEP;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	751a      	strb	r2, [r3, #20]
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000900:	2288      	movs	r2, #136	; 0x88
 8000902:	2101      	movs	r1, #1
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fe7b 	bl	8000600 <SX1278_SPIWrite>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	2112      	movs	r1, #18
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe6e 	bl	8000600 <SX1278_SPIWrite>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	460b      	mov	r3, r1
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	7afa      	ldrb	r2, [r7, #11]
 800093e:	74da      	strb	r2, [r3, #19]

	SX1278_defaultConfig(module); //setting base parameter
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f7ff fec1 	bl	80006c8 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8000946:	2287      	movs	r2, #135	; 0x87
 8000948:	214d      	movs	r1, #77	; 0x4d
 800094a:	68f8      	ldr	r0, [r7, #12]
 800094c:	f7ff fe58 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000950:	2200      	movs	r2, #0
 8000952:	2124      	movs	r1, #36	; 0x24
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f7ff fe53 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800095a:	2241      	movs	r2, #65	; 0x41
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff fe4e 	bl	8000600 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff ffd4 	bl	8000912 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800096a:	22f7      	movs	r2, #247	; 0xf7
 800096c:	2111      	movs	r1, #17
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff fe46 	bl	8000600 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	461a      	mov	r2, r3
 8000978:	2122      	movs	r1, #34	; 0x22
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff fe40 	bl	8000600 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000980:	210e      	movs	r1, #14
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff fe1d 	bl	80005c2 <SX1278_SPIRead>
 8000988:	4603      	mov	r3, r0
 800098a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	461a      	mov	r2, r3
 8000990:	210d      	movs	r1, #13
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff fe34 	bl	8000600 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000998:	2122      	movs	r1, #34	; 0x22
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f7ff fe11 	bl	80005c2 <SX1278_SPIRead>
 80009a0:	4603      	mov	r3, r0
 80009a2:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009a4:	7dba      	ldrb	r2, [r7, #22]
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d104      	bne.n	80009b6 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2202      	movs	r2, #2
 80009b0:	751a      	strb	r2, [r3, #20]
			return 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1ea      	bne.n	8000998 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fd70 	bl	80004ac <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fe7b 	bl	80006c8 <SX1278_defaultConfig>
			return 0;
 80009d2:	2300      	movs	r3, #0
		}
	}
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	2100      	movs	r1, #0
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff fe2d 	bl	8000652 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80009f8:	228b      	movs	r2, #139	; 0x8b
 80009fa:	2101      	movs	r1, #1
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fdff 	bl	8000600 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fdc4 	bl	8000594 <SX1278_hw_GetDIO0>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a12:	2112      	movs	r1, #18
 8000a14:	68f8      	ldr	r0, [r7, #12]
 8000a16:	f7ff fdd4 	bl	80005c2 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff79 	bl	8000912 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f7ff ff49 	bl	80008b8 <SX1278_standby>
			return 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e013      	b.n	8000a52 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d109      	bne.n	8000a4a <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd36 	bl	80004ac <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fe41 	bl	80006c8 <SX1278_defaultConfig>
			return 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e003      	b.n	8000a52 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f7ff fd97 	bl	800057e <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a50:	e7d7      	b.n	8000a02 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000a5a:	b590      	push	{r4, r7, lr}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fcf2 	bl	8000454 <SX1278_hw_init>
	module->frequency = frequency;
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000a76:	e9c2 3402 	strd	r3, r4, [r2, #8]
	module->power = power;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a80:	741a      	strb	r2, [r3, #16]
	module->LoRa_Rate = LoRa_Rate;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000a88:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a90:	749a      	strb	r2, [r3, #18]
	module->packetLength = packetLength;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000a98:	74da      	strb	r2, [r3, #19]
	SX1278_defaultConfig(module);
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f7ff fe14 	bl	80006c8 <SX1278_defaultConfig>
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 faed 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f8a1 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab6:	f000 f91b 	bl	8000cf0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aba:	f000 f8e3 	bl	8000c84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	//initialize LoRa module
	SX1278_hw.dio0.port = DO_RF_GPIO_Port;
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <main+0x120>)
 8000ac0:	4a42      	ldr	r2, [pc, #264]	; (8000bcc <main+0x124>)
 8000ac2:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DO_RF_Pin;
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <main+0x120>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = CS_RF_GPIO_Port;
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <main+0x120>)
 8000acc:	4a3f      	ldr	r2, [pc, #252]	; (8000bcc <main+0x124>)
 8000ace:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = CS_RF_Pin;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <main+0x120>)
 8000ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad6:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <main+0x120>)
 8000ada:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <main+0x124>)
 8000adc:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RF_RST_Pin;
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <main+0x120>)
 8000ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae4:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <main+0x120>)
 8000ae8:	4a39      	ldr	r2, [pc, #228]	; (8000bd0 <main+0x128>)
 8000aea:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <main+0x12c>)
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <main+0x120>)
 8000af0:	601a      	str	r2, [r3, #0]

	//SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_20_8KHZ, 10);
	SX1278_begin(&SX1278, 868E6, SX1278_POWER_20DBM, SX1278_LORA_SF_8, SX1278_LORA_BW_125KHZ, 10);
 8000af2:	230a      	movs	r3, #10
 8000af4:	9303      	str	r3, [sp, #12]
 8000af6:	2307      	movs	r3, #7
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2302      	movs	r3, #2
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	2300      	movs	r3, #0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	a32f      	add	r3, pc, #188	; (adr r3, 8000bc0 <main+0x118>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	4832      	ldr	r0, [pc, #200]	; (8000bd4 <main+0x12c>)
 8000b0a:	f7ff ffa6 	bl	8000a5a <SX1278_begin>
	ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000b0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b12:	2110      	movs	r1, #16
 8000b14:	482f      	ldr	r0, [pc, #188]	; (8000bd4 <main+0x12c>)
 8000b16:	f7ff ff09 	bl	800092c <SX1278_LoRaEntryTx>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <main+0x130>)
 8000b1e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int i = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  while (1)
  {
		HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b28:	f000 fb12 	bl	8001150 <HAL_Delay>
		message_length = sprintf(buffer, "S %s %s %s %s", latitude[i], longitude[i], height[i], speed[i]);
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <main+0x134>)
 8000b38:	1898      	adds	r0, r3, r2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <main+0x138>)
 8000b46:	189c      	adds	r4, r3, r2
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <main+0x13c>)
 8000b54:	1899      	adds	r1, r3, r2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <main+0x140>)
 8000b62:	4413      	add	r3, r2
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	9100      	str	r1, [sp, #0]
 8000b68:	4623      	mov	r3, r4
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	491f      	ldr	r1, [pc, #124]	; (8000bec <main+0x144>)
 8000b6e:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <main+0x148>)
 8000b70:	f001 ff18 	bl	80029a4 <siprintf>
 8000b74:	4602      	mov	r2, r0
 8000b76:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <main+0x14c>)
 8000b78:	601a      	str	r2, [r3, #0]
		ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <main+0x14c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <main+0x12c>)
 8000b88:	f7ff fed0 	bl	800092c <SX1278_LoRaEntryTx>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <main+0x130>)
 8000b90:	601a      	str	r2, [r3, #0]
		ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer, message_length,2000);
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <main+0x14c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b9c:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <main+0x148>)
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <main+0x12c>)
 8000ba0:	f7ff ff1c 	bl	80009dc <SX1278_LoRaTxPacket>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <main+0x130>)
 8000ba8:	601a      	str	r2, [r3, #0]
		i++;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3301      	adds	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
		if (i >= 23) i = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b16      	cmp	r3, #22
 8000bb4:	ddb6      	ble.n	8000b24 <main+0x7c>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
		HAL_Delay(500);
 8000bba:	e7b3      	b.n	8000b24 <main+0x7c>
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	33bca100 	.word	0x33bca100
 8000bc4:	00000000 	.word	0x00000000
 8000bc8:	200005f4 	.word	0x200005f4
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	2000047c 	.word	0x2000047c
 8000bd4:	200004d8 	.word	0x200004d8
 8000bd8:	200005f0 	.word	0x200005f0
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	200000e8 	.word	0x200000e8
 8000be4:	200001d0 	.word	0x200001d0
 8000be8:	200002b8 	.word	0x200002b8
 8000bec:	080031d0 	.word	0x080031d0
 8000bf0:	2000043c 	.word	0x2000043c
 8000bf4:	20000438 	.word	0x20000438

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	2228      	movs	r2, #40	; 0x28
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 fec3 	bl	8002992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0318 	add.w	r3, r7, #24
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fdb5 	bl	80017b0 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f8ca 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f820 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c76:	f000 f8b5 	bl	8000de4 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3740      	adds	r7, #64	; 0x40
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c8a:	4a18      	ldr	r2, [pc, #96]	; (8000cec <MX_SPI1_Init+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cb8:	2208      	movs	r2, #8
 8000cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd0:	220a      	movs	r2, #10
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_SPI1_Init+0x64>)
 8000cd6:	f001 f955 	bl	8001f84 <HAL_SPI_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ce0:	f000 f880 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2000047c 	.word	0x2000047c
 8000cec:	40013000 	.word	0x40013000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d04:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a33      	ldr	r2, [pc, #204]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0320 	and.w	r3, r3, #32
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	481c      	ldr	r0, [pc, #112]	; (8000ddc <MX_GPIO_Init+0xec>)
 8000d6c:	f000 fd07 	bl	800177e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_RF_Pin|RF_RST_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d76:	481a      	ldr	r0, [pc, #104]	; (8000de0 <MX_GPIO_Init+0xf0>)
 8000d78:	f000 fd01 	bl	800177e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	4619      	mov	r1, r3
 8000d94:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_GPIO_Init+0xec>)
 8000d96:	f000 fb81 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : DO_RF_Pin */
  GPIO_InitStruct.Pin = DO_RF_Pin;
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DO_RF_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_GPIO_Init+0xf0>)
 8000dae:	f000 fb75 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_RF_Pin RF_RST_Pin */
  GPIO_InitStruct.Pin = CS_RF_Pin|RF_RST_Pin;
 8000db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_GPIO_Init+0xf0>)
 8000dcc:	f000 fb66 	bl	800149c <HAL_GPIO_Init>

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40011000 	.word	0x40011000
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_MspInit+0x5c>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_MspInit+0x5c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_MspInit+0x5c>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_MspInit+0x5c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_MspInit+0x60>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <HAL_MspInit+0x60>)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010000 	.word	0x40010000

08000e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <HAL_SPI_MspInit+0xb4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d145      	bne.n	8000f00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a24      	ldr	r2, [pc, #144]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_SPI_MspInit+0xb8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SCK_RF_Pin|MOSI_RF_Pin;
 8000ea4:	2328      	movs	r3, #40	; 0x28
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <HAL_SPI_MspInit+0xbc>)
 8000eb8:	f000 faf0 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <HAL_SPI_MspInit+0xbc>)
 8000ed0:	f000 fae4 	bl	800149c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_SPI_MspInit+0xc0>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_SPI_MspInit+0xc0>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2023      	movs	r0, #35	; 0x23
 8000ef6:	f000 fa24 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000efa:	2023      	movs	r0, #35	; 0x23
 8000efc:	f000 fa3d 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013000 	.word	0x40013000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	40010000 	.word	0x40010000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <HardFault_Handler+0x4>

08000f2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <MemManage_Handler+0x4>

08000f30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <BusFault_Handler+0x4>

08000f36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f8d8 	bl	8001118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <SPI1_IRQHandler+0x10>)
 8000f72:	f001 fb3f 	bl	80025f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000047c 	.word	0x2000047c

08000f80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x50>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x16>
		heap_end = &end;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <_sbrk+0x50>)
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <_sbrk+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <_sbrk+0x50>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <_sbrk+0x50>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	466a      	mov	r2, sp
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d907      	bls.n	8000fba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000faa:	f001 fcbd 	bl	8002928 <__errno>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fb8:	e006      	b.n	8000fc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <_sbrk+0x50>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <_sbrk+0x50>)
 8000fc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000042c 	.word	0x2000042c
 8000fd4:	20000618 	.word	0x20000618

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <SystemInit+0x5c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <SystemInit+0x5c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <SystemInit+0x5c>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	4911      	ldr	r1, [pc, #68]	; (8001034 <SystemInit+0x5c>)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <SystemInit+0x60>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <SystemInit+0x5c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <SystemInit+0x5c>)
 8000ffa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <SystemInit+0x5c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <SystemInit+0x5c>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <SystemInit+0x5c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <SystemInit+0x5c>)
 8001016:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800101a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <SystemInit+0x5c>)
 800101e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001022:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SystemInit+0x64>)
 8001026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800102a:	609a      	str	r2, [r3, #8]
#endif 
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000
 8001038:	f8ff0000 	.word	0xf8ff0000
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001040:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001042:	e003      	b.n	800104c <LoopCopyDataInit>

08001044 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001046:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001048:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800104a:	3104      	adds	r1, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001050:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001052:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001054:	d3f6      	bcc.n	8001044 <CopyDataInit>
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001058:	e002      	b.n	8001060 <LoopFillZerobss>

0800105a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800105c:	f842 3b04 	str.w	r3, [r2], #4

08001060 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001062:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001064:	d3f9      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001066:	f7ff ffb7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f001 fc63 	bl	8002934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106e:	f7ff fd1b 	bl	8000aa8 <main>
  bx lr
 8001072:	4770      	bx	lr
  ldr r3, =_sidata
 8001074:	08003260 	.word	0x08003260
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800107c:	20000410 	.word	0x20000410
  ldr r2, =_sbss
 8001080:	20000410 	.word	0x20000410
  ldr r3, = _ebss
 8001084:	20000618 	.word	0x20000618

08001088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_2_IRQHandler>
	...

0800108c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_Init+0x28>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	2003      	movs	r0, #3
 800109e:	f000 f945 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f808 	bl	80010b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a8:	f7ff fea2 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x54>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x58>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f95d 	bl	8001396 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d80a      	bhi.n	8001102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f000 f925 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_InitTick+0x5c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
 8001100:	e000      	b.n	8001104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200003a0 	.word	0x200003a0
 8001110:	200003a8 	.word	0x200003a8
 8001114:	200003a4 	.word	0x200003a4

08001118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_IncTick+0x1c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x20>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a03      	ldr	r2, [pc, #12]	; (8001138 <HAL_IncTick+0x20>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	200003a8 	.word	0x200003a8
 8001138:	20000610 	.word	0x20000610

0800113c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b02      	ldr	r3, [pc, #8]	; (800114c <HAL_GetTick+0x10>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000610 	.word	0x20000610

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff0 	bl	800113c <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_Delay+0x40>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffe0 	bl	800113c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200003a8 	.word	0x200003a8

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <__NVIC_EnableIRQ+0x34>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800130c:	f7ff ff90 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff2d 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff42 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff35 	bl	80011f8 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa2 	bl	80012e8 <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d005      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e051      	b.n	8001476 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 020e 	bic.w	r2, r2, #14
 80013e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_DMA_Abort_IT+0xd0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d029      	beq.n	8001450 <HAL_DMA_Abort_IT+0xa0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a20      	ldr	r2, [pc, #128]	; (8001484 <HAL_DMA_Abort_IT+0xd4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d022      	beq.n	800144c <HAL_DMA_Abort_IT+0x9c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <HAL_DMA_Abort_IT+0xd8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d01a      	beq.n	8001446 <HAL_DMA_Abort_IT+0x96>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_DMA_Abort_IT+0xdc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d012      	beq.n	8001440 <HAL_DMA_Abort_IT+0x90>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_DMA_Abort_IT+0xe0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d00a      	beq.n	800143a <HAL_DMA_Abort_IT+0x8a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_DMA_Abort_IT+0xe4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d102      	bne.n	8001434 <HAL_DMA_Abort_IT+0x84>
 800142e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001432:	e00e      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 8001434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001438:	e00b      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 800143a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143e:	e008      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	e005      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	e002      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 800144c:	2310      	movs	r3, #16
 800144e:	e000      	b.n	8001452 <HAL_DMA_Abort_IT+0xa2>
 8001450:	2301      	movs	r3, #1
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_DMA_Abort_IT+0xe8>)
 8001454:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    } 
  }
  return status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40020008 	.word	0x40020008
 8001484:	4002001c 	.word	0x4002001c
 8001488:	40020030 	.word	0x40020030
 800148c:	40020044 	.word	0x40020044
 8001490:	40020058 	.word	0x40020058
 8001494:	4002006c 	.word	0x4002006c
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b08b      	sub	sp, #44	; 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e127      	b.n	8001700 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8116 	bne.w	80016fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d034      	beq.n	8001540 <HAL_GPIO_Init+0xa4>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d80d      	bhi.n	80014f6 <HAL_GPIO_Init+0x5a>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x9a>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d804      	bhi.n	80014ec <HAL_GPIO_Init+0x50>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d031      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d01c      	beq.n	8001524 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e048      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d043      	beq.n	8001578 <HAL_GPIO_Init+0xdc>
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d01b      	beq.n	800152c <HAL_GPIO_Init+0x90>
          break;
 80014f4:	e043      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f6:	4a89      	ldr	r2, [pc, #548]	; (800171c <HAL_GPIO_Init+0x280>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d026      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014fc:	4a87      	ldr	r2, [pc, #540]	; (800171c <HAL_GPIO_Init+0x280>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d806      	bhi.n	8001510 <HAL_GPIO_Init+0x74>
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_GPIO_Init+0x284>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d020      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001508:	4a86      	ldr	r2, [pc, #536]	; (8001724 <HAL_GPIO_Init+0x288>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01d      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 800150e:	e036      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001510:	4a85      	ldr	r2, [pc, #532]	; (8001728 <HAL_GPIO_Init+0x28c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001516:	4a85      	ldr	r2, [pc, #532]	; (800172c <HAL_GPIO_Init+0x290>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d016      	beq.n	800154a <HAL_GPIO_Init+0xae>
 800151c:	4a84      	ldr	r2, [pc, #528]	; (8001730 <HAL_GPIO_Init+0x294>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e028      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e023      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01e      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e019      	b.n	800157e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e012      	b.n	800157e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2bff      	cmp	r3, #255	; 0xff
 8001582:	d801      	bhi.n	8001588 <HAL_GPIO_Init+0xec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	e001      	b.n	800158c <HAL_GPIO_Init+0xf0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3304      	adds	r3, #4
 800158c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d802      	bhi.n	800159a <HAL_GPIO_Init+0xfe>
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x104>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3b08      	subs	r3, #8
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	210f      	movs	r1, #15
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	401a      	ands	r2, r3
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8096 	beq.w	80016fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e6:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_GPIO_Init+0x29c>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4b      	ldr	r2, [pc, #300]	; (800173c <HAL_GPIO_Init+0x2a0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x19e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x19a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x196>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x192>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800162e:	2304      	movs	r3, #4
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800163a:	2300      	movs	r3, #0
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164c:	493a      	ldr	r1, [pc, #232]	; (8001738 <HAL_GPIO_Init+0x29c>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4938      	ldr	r1, [pc, #224]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	4933      	ldr	r1, [pc, #204]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	492e      	ldr	r1, [pc, #184]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4924      	ldr	r1, [pc, #144]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	491f      	ldr	r1, [pc, #124]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	491a      	ldr	r1, [pc, #104]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4915      	ldr	r1, [pc, #84]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f aed0 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	372c      	adds	r7, #44	; 0x2c
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	10210000 	.word	0x10210000
 8001720:	10110000 	.word	0x10110000
 8001724:	10120000 	.word	0x10120000
 8001728:	10310000 	.word	0x10310000
 800172c:	10320000 	.word	0x10320000
 8001730:	10220000 	.word	0x10220000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	e001      	b.n	8001772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800178e:	787b      	ldrb	r3, [r7, #1]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	041a      	lsls	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	611a      	str	r2, [r3, #16]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e26c      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8087 	beq.w	80018de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d0:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d00c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d112      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
 80017e8:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d10b      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06c      	beq.n	80018dc <HAL_RCC_OscConfig+0x12c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d168      	bne.n	80018dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e246      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x76>
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x98>
 800182e:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7a      	ldr	r2, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xbc>
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6a      	ldr	r2, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fc56 	bl	800113c <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc52 	bl	800113c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1fa      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xe4>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc42 	bl	800113c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fc3e 	bl	800113c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1e6      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x10c>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1ba      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4939      	ldr	r1, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fbf7 	bl	800113c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fbf3 	bl	800113c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e19b      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fbd6 	bl	800113c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fbd2 	bl	800113c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e17a      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03a      	beq.n	8001a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fbb6 	bl	800113c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbb2 	bl	800113c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e15a      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f000 faa8 	bl	8001f48 <RCC_Delay>
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fb9c 	bl	800113c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a06:	e00f      	b.n	8001a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb98 	bl	800113c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e140      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	42420000 	.word	0x42420000
 8001a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b9e      	ldr	r3, [pc, #632]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e9      	bne.n	8001a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a6 	beq.w	8001b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b97      	ldr	r3, [pc, #604]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a93      	ldr	r2, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b91      	ldr	r3, [pc, #580]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb59 	bl	800113c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff fb55 	bl	800113c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0fd      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x312>
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a7a      	ldr	r2, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e02d      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x334>
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a75      	ldr	r2, [pc, #468]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	e01c      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_OscConfig+0x356>
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a6c      	ldr	r2, [pc, #432]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a69      	ldr	r2, [pc, #420]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a66      	ldr	r2, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a63      	ldr	r2, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d015      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb09 	bl	800113c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fb05 	bl	800113c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0ab      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ee      	beq.n	8001b2e <HAL_RCC_OscConfig+0x37e>
 8001b50:	e014      	b.n	8001b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff faf3 	bl	800113c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff faef 	bl	800113c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e095      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ee      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b82:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8081 	beq.w	8001c9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d061      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d146      	bne.n	8001c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fac3 	bl	800113c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff fabf 	bl	800113c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e067      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	492d      	ldr	r1, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a19      	ldr	r1, [r3, #32]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	430b      	orrs	r3, r1
 8001c06:	4927      	ldr	r1, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fa93 	bl	800113c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff fa8f 	bl	800113c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e037      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46a>
 8001c38:	e02f      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa7c 	bl	800113c <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa78 	bl	800113c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e020      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x498>
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42420060 	.word	0x42420060

08001cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0d0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4965      	ldr	r1, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d040      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e073      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4936      	ldr	r1, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff f9cc 	bl	800113c <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f9c8 	bl	800113c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e053      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d210      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	4922      	ldr	r1, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4601      	mov	r1, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	fa21 f303 	lsr.w	r3, r1, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1cc>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f92a 	bl	80010b8 <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	0800320c 	.word	0x0800320c
 8001e7c:	200003a0 	.word	0x200003a0
 8001e80:	200003a4 	.word	0x200003a4

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b490      	push	{r4, r7}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e8c:	1d3c      	adds	r4, r7, #4
 8001e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x46>
 8001ec2:	e02d      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ec6:	623b      	str	r3, [r7, #32]
      break;
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001edc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c5b      	lsrs	r3, r3, #17
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f02:	fb02 f203 	mul.w	r2, r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	e004      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	623b      	str	r3, [r7, #32]
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f22:	623b      	str	r3, [r7, #32]
      break;
 8001f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f26:	6a3b      	ldr	r3, [r7, #32]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc90      	pop	{r4, r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	080031e0 	.word	0x080031e0
 8001f38:	080031f0 	.word	0x080031f0
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	007a1200 	.word	0x007a1200
 8001f44:	003d0900 	.word	0x003d0900

08001f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <RCC_Delay+0x34>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <RCC_Delay+0x38>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f64:	bf00      	nop
  }
  while (Delay --);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	60fa      	str	r2, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <RCC_Delay+0x1c>
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	200003a0 	.word	0x200003a0
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e053      	b.n	800203e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7fe ff4f 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fcc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	ea42 0103 	orr.w	r1, r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	0c1a      	lsrs	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f002 0204 	and.w	r2, r2, #4
 800201c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b088      	sub	sp, #32
 800204a:	af00      	add	r7, sp, #0
 800204c:	60f8      	str	r0, [r7, #12]
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_SPI_Transmit+0x22>
 8002064:	2302      	movs	r3, #2
 8002066:	e11e      	b.n	80022a6 <HAL_SPI_Transmit+0x260>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002070:	f7ff f864 	bl	800113c <HAL_GetTick>
 8002074:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d002      	beq.n	800208c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	77fb      	strb	r3, [r7, #31]
    goto error;
 800208a:	e103      	b.n	8002294 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_SPI_Transmit+0x52>
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800209c:	e0fa      	b.n	8002294 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2203      	movs	r2, #3
 80020a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e4:	d107      	bne.n	80020f6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d007      	beq.n	8002114 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800211c:	d14b      	bne.n	80021b6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_SPI_Transmit+0xe6>
 8002126:	8afb      	ldrh	r3, [r7, #22]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d13e      	bne.n	80021aa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	1c9a      	adds	r2, r3, #2
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002150:	e02b      	b.n	80021aa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d112      	bne.n	8002186 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	881a      	ldrh	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	1c9a      	adds	r2, r3, #2
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	86da      	strh	r2, [r3, #54]	; 0x36
 8002184:	e011      	b.n	80021aa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002186:	f7fe ffd9 	bl	800113c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d803      	bhi.n	800219e <HAL_SPI_Transmit+0x158>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219c:	d102      	bne.n	80021a4 <HAL_SPI_Transmit+0x15e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021a8:	e074      	b.n	8002294 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ce      	bne.n	8002152 <HAL_SPI_Transmit+0x10c>
 80021b4:	e04c      	b.n	8002250 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <HAL_SPI_Transmit+0x17e>
 80021be:	8afb      	ldrh	r3, [r7, #22]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d140      	bne.n	8002246 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ea:	e02c      	b.n	8002246 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d113      	bne.n	8002222 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002220:	e011      	b.n	8002246 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002222:	f7fe ff8b 	bl	800113c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d803      	bhi.n	800223a <HAL_SPI_Transmit+0x1f4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002238:	d102      	bne.n	8002240 <HAL_SPI_Transmit+0x1fa>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002244:	e026      	b.n	8002294 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1cd      	bne.n	80021ec <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	6839      	ldr	r1, [r7, #0]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fb49 	bl	80028ec <SPI_EndRxTxTransaction>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
 8002290:	e000      	b.n	8002294 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08c      	sub	sp, #48	; 0x30
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022bc:	2301      	movs	r3, #1
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_SPI_TransmitReceive+0x26>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e18a      	b.n	80025ea <HAL_SPI_TransmitReceive+0x33c>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022dc:	f7fe ff2e 	bl	800113c <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00f      	beq.n	800231e <HAL_SPI_TransmitReceive+0x70>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002304:	d107      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <HAL_SPI_TransmitReceive+0x68>
 800230e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002312:	2b04      	cmp	r3, #4
 8002314:	d003      	beq.n	800231e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800231c:	e15b      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_SPI_TransmitReceive+0x82>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_SPI_TransmitReceive+0x82>
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002336:	e14e      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b04      	cmp	r3, #4
 8002342:	d003      	beq.n	800234c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2205      	movs	r2, #5
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	887a      	ldrh	r2, [r7, #2]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d007      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a8:	d178      	bne.n	800249c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_SPI_TransmitReceive+0x10a>
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d166      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	1c9a      	adds	r2, r3, #2
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023dc:	e053      	b.n	8002486 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d11b      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x176>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x176>
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d113      	bne.n	8002424 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	1c9a      	adds	r2, r3, #2
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d119      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x1b8>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d014      	beq.n	8002466 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	b292      	uxth	r2, r2
 8002448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	1c9a      	adds	r2, r3, #2
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002462:	2301      	movs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002466:	f7fe fe69 	bl	800113c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002472:	429a      	cmp	r2, r3
 8002474:	d807      	bhi.n	8002486 <HAL_SPI_TransmitReceive+0x1d8>
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247c:	d003      	beq.n	8002486 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002484:	e0a7      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1a6      	bne.n	80023de <HAL_SPI_TransmitReceive+0x130>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1a1      	bne.n	80023de <HAL_SPI_TransmitReceive+0x130>
 800249a:	e07c      	b.n	8002596 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x1fc>
 80024a4:	8b7b      	ldrh	r3, [r7, #26]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d16b      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d0:	e057      	b.n	8002582 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11c      	bne.n	800251a <HAL_SPI_TransmitReceive+0x26c>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d017      	beq.n	800251a <HAL_SPI_TransmitReceive+0x26c>
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d114      	bne.n	800251a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d119      	bne.n	800255c <HAL_SPI_TransmitReceive+0x2ae>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002558:	2301      	movs	r3, #1
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800255c:	f7fe fdee 	bl	800113c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002568:	429a      	cmp	r2, r3
 800256a:	d803      	bhi.n	8002574 <HAL_SPI_TransmitReceive+0x2c6>
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002572:	d102      	bne.n	800257a <HAL_SPI_TransmitReceive+0x2cc>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002580:	e029      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1a2      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x224>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d19d      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f9a6 	bl	80028ec <SPI_EndRxTxTransaction>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025b2:	e010      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	e000      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3730      	adds	r7, #48	; 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10f      	bne.n	8002638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
    return;
 8002636:	e0bf      	b.n	80027b8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_SPI_IRQHandler+0x66>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	09db      	lsrs	r3, r3, #7
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
    return;
 8002658:	e0ae      	b.n	80027b8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_SPI_IRQHandler+0x80>
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80a2 	beq.w	80027b8 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 809b 	beq.w	80027b8 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d023      	beq.n	80026d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b03      	cmp	r3, #3
 8002698:	d011      	beq.n	80026be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	e00b      	b.n	80026d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
        return;
 80026d4:	e070      	b.n	80027b8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d014      	beq.n	800270c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2b00      	cmp	r3, #0
 8002712:	d050      	beq.n	80027b6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002722:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_SPI_IRQHandler+0x14c>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d034      	beq.n	80027aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0203 	bic.w	r2, r2, #3
 800274e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	2b00      	cmp	r3, #0
 8002756:	d011      	beq.n	800277c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_SPI_IRQHandler+0x1cc>)
 800275e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fe23 	bl	80013b0 <HAL_DMA_Abort_IT>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_SPI_IRQHandler+0x1cc>)
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fe0d 	bl	80013b0 <HAL_DMA_Abort_IT>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027a8:	e003      	b.n	80027b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f80a 	bl	80027c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027b0:	e000      	b.n	80027b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80027b2:	bf00      	nop
    return;
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
  }
}
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	080027f1 	.word	0x080027f1

080027c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e4:	b2db      	uxtb	r3, r3
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff ffda 	bl	80027c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002828:	e04c      	b.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002830:	d048      	beq.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002832:	f7fe fc83 	bl	800113c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d902      	bls.n	8002848 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d13d      	bne.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002860:	d111      	bne.n	8002886 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286a:	d004      	beq.n	8002876 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002874:	d107      	bne.n	8002886 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288e:	d10f      	bne.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e00f      	b.n	80028e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d1a3      	bne.n	800282a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff ff88 	bl	8002818 <SPI_WaitFlagStateUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0220 	orr.w	r2, r3, #32
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e000      	b.n	8002920 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <__errno>:
 8002928:	4b01      	ldr	r3, [pc, #4]	; (8002930 <__errno+0x8>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	200003ac 	.word	0x200003ac

08002934 <__libc_init_array>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	2500      	movs	r5, #0
 8002938:	4e0c      	ldr	r6, [pc, #48]	; (800296c <__libc_init_array+0x38>)
 800293a:	4c0d      	ldr	r4, [pc, #52]	; (8002970 <__libc_init_array+0x3c>)
 800293c:	1ba4      	subs	r4, r4, r6
 800293e:	10a4      	asrs	r4, r4, #2
 8002940:	42a5      	cmp	r5, r4
 8002942:	d109      	bne.n	8002958 <__libc_init_array+0x24>
 8002944:	f000 fc36 	bl	80031b4 <_init>
 8002948:	2500      	movs	r5, #0
 800294a:	4e0a      	ldr	r6, [pc, #40]	; (8002974 <__libc_init_array+0x40>)
 800294c:	4c0a      	ldr	r4, [pc, #40]	; (8002978 <__libc_init_array+0x44>)
 800294e:	1ba4      	subs	r4, r4, r6
 8002950:	10a4      	asrs	r4, r4, #2
 8002952:	42a5      	cmp	r5, r4
 8002954:	d105      	bne.n	8002962 <__libc_init_array+0x2e>
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800295c:	4798      	blx	r3
 800295e:	3501      	adds	r5, #1
 8002960:	e7ee      	b.n	8002940 <__libc_init_array+0xc>
 8002962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002966:	4798      	blx	r3
 8002968:	3501      	adds	r5, #1
 800296a:	e7f2      	b.n	8002952 <__libc_init_array+0x1e>
 800296c:	08003258 	.word	0x08003258
 8002970:	08003258 	.word	0x08003258
 8002974:	08003258 	.word	0x08003258
 8002978:	0800325c 	.word	0x0800325c

0800297c <memcpy>:
 800297c:	b510      	push	{r4, lr}
 800297e:	1e43      	subs	r3, r0, #1
 8002980:	440a      	add	r2, r1
 8002982:	4291      	cmp	r1, r2
 8002984:	d100      	bne.n	8002988 <memcpy+0xc>
 8002986:	bd10      	pop	{r4, pc}
 8002988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800298c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002990:	e7f7      	b.n	8002982 <memcpy+0x6>

08002992 <memset>:
 8002992:	4603      	mov	r3, r0
 8002994:	4402      	add	r2, r0
 8002996:	4293      	cmp	r3, r2
 8002998:	d100      	bne.n	800299c <memset+0xa>
 800299a:	4770      	bx	lr
 800299c:	f803 1b01 	strb.w	r1, [r3], #1
 80029a0:	e7f9      	b.n	8002996 <memset+0x4>
	...

080029a4 <siprintf>:
 80029a4:	b40e      	push	{r1, r2, r3}
 80029a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029aa:	b500      	push	{lr}
 80029ac:	b09c      	sub	sp, #112	; 0x70
 80029ae:	ab1d      	add	r3, sp, #116	; 0x74
 80029b0:	9002      	str	r0, [sp, #8]
 80029b2:	9006      	str	r0, [sp, #24]
 80029b4:	9107      	str	r1, [sp, #28]
 80029b6:	9104      	str	r1, [sp, #16]
 80029b8:	4808      	ldr	r0, [pc, #32]	; (80029dc <siprintf+0x38>)
 80029ba:	4909      	ldr	r1, [pc, #36]	; (80029e0 <siprintf+0x3c>)
 80029bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80029c0:	9105      	str	r1, [sp, #20]
 80029c2:	6800      	ldr	r0, [r0, #0]
 80029c4:	a902      	add	r1, sp, #8
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f000 f866 	bl	8002a98 <_svfiprintf_r>
 80029cc:	2200      	movs	r2, #0
 80029ce:	9b02      	ldr	r3, [sp, #8]
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	b01c      	add	sp, #112	; 0x70
 80029d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029d8:	b003      	add	sp, #12
 80029da:	4770      	bx	lr
 80029dc:	200003ac 	.word	0x200003ac
 80029e0:	ffff0208 	.word	0xffff0208

080029e4 <__ssputs_r>:
 80029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	688e      	ldr	r6, [r1, #8]
 80029ea:	4682      	mov	sl, r0
 80029ec:	429e      	cmp	r6, r3
 80029ee:	460c      	mov	r4, r1
 80029f0:	4690      	mov	r8, r2
 80029f2:	4699      	mov	r9, r3
 80029f4:	d837      	bhi.n	8002a66 <__ssputs_r+0x82>
 80029f6:	898a      	ldrh	r2, [r1, #12]
 80029f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029fc:	d031      	beq.n	8002a62 <__ssputs_r+0x7e>
 80029fe:	2302      	movs	r3, #2
 8002a00:	6825      	ldr	r5, [r4, #0]
 8002a02:	6909      	ldr	r1, [r1, #16]
 8002a04:	1a6f      	subs	r7, r5, r1
 8002a06:	6965      	ldr	r5, [r4, #20]
 8002a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a10:	f109 0301 	add.w	r3, r9, #1
 8002a14:	443b      	add	r3, r7
 8002a16:	429d      	cmp	r5, r3
 8002a18:	bf38      	it	cc
 8002a1a:	461d      	movcc	r5, r3
 8002a1c:	0553      	lsls	r3, r2, #21
 8002a1e:	d530      	bpl.n	8002a82 <__ssputs_r+0x9e>
 8002a20:	4629      	mov	r1, r5
 8002a22:	f000 fb2d 	bl	8003080 <_malloc_r>
 8002a26:	4606      	mov	r6, r0
 8002a28:	b950      	cbnz	r0, 8002a40 <__ssputs_r+0x5c>
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a30:	f8ca 3000 	str.w	r3, [sl]
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3a:	81a3      	strh	r3, [r4, #12]
 8002a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a40:	463a      	mov	r2, r7
 8002a42:	6921      	ldr	r1, [r4, #16]
 8002a44:	f7ff ff9a 	bl	800297c <memcpy>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	6126      	str	r6, [r4, #16]
 8002a56:	443e      	add	r6, r7
 8002a58:	6026      	str	r6, [r4, #0]
 8002a5a:	464e      	mov	r6, r9
 8002a5c:	6165      	str	r5, [r4, #20]
 8002a5e:	1bed      	subs	r5, r5, r7
 8002a60:	60a5      	str	r5, [r4, #8]
 8002a62:	454e      	cmp	r6, r9
 8002a64:	d900      	bls.n	8002a68 <__ssputs_r+0x84>
 8002a66:	464e      	mov	r6, r9
 8002a68:	4632      	mov	r2, r6
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f000 faa1 	bl	8002fb4 <memmove>
 8002a72:	68a3      	ldr	r3, [r4, #8]
 8002a74:	2000      	movs	r0, #0
 8002a76:	1b9b      	subs	r3, r3, r6
 8002a78:	60a3      	str	r3, [r4, #8]
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	441e      	add	r6, r3
 8002a7e:	6026      	str	r6, [r4, #0]
 8002a80:	e7dc      	b.n	8002a3c <__ssputs_r+0x58>
 8002a82:	462a      	mov	r2, r5
 8002a84:	f000 fb56 	bl	8003134 <_realloc_r>
 8002a88:	4606      	mov	r6, r0
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	d1e2      	bne.n	8002a54 <__ssputs_r+0x70>
 8002a8e:	6921      	ldr	r1, [r4, #16]
 8002a90:	4650      	mov	r0, sl
 8002a92:	f000 faa9 	bl	8002fe8 <_free_r>
 8002a96:	e7c8      	b.n	8002a2a <__ssputs_r+0x46>

08002a98 <_svfiprintf_r>:
 8002a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	898b      	ldrh	r3, [r1, #12]
 8002aa0:	b09d      	sub	sp, #116	; 0x74
 8002aa2:	061f      	lsls	r7, r3, #24
 8002aa4:	4680      	mov	r8, r0
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	4616      	mov	r6, r2
 8002aaa:	d50f      	bpl.n	8002acc <_svfiprintf_r+0x34>
 8002aac:	690b      	ldr	r3, [r1, #16]
 8002aae:	b96b      	cbnz	r3, 8002acc <_svfiprintf_r+0x34>
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	f000 fae5 	bl	8003080 <_malloc_r>
 8002ab6:	6020      	str	r0, [r4, #0]
 8002ab8:	6120      	str	r0, [r4, #16]
 8002aba:	b928      	cbnz	r0, 8002ac8 <_svfiprintf_r+0x30>
 8002abc:	230c      	movs	r3, #12
 8002abe:	f8c8 3000 	str.w	r3, [r8]
 8002ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac6:	e0c8      	b.n	8002c5a <_svfiprintf_r+0x1c2>
 8002ac8:	2340      	movs	r3, #64	; 0x40
 8002aca:	6163      	str	r3, [r4, #20]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ad6:	2330      	movs	r3, #48	; 0x30
 8002ad8:	f04f 0b01 	mov.w	fp, #1
 8002adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ae0:	9503      	str	r5, [sp, #12]
 8002ae2:	4637      	mov	r7, r6
 8002ae4:	463d      	mov	r5, r7
 8002ae6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002aea:	b10b      	cbz	r3, 8002af0 <_svfiprintf_r+0x58>
 8002aec:	2b25      	cmp	r3, #37	; 0x25
 8002aee:	d13e      	bne.n	8002b6e <_svfiprintf_r+0xd6>
 8002af0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002af4:	d00b      	beq.n	8002b0e <_svfiprintf_r+0x76>
 8002af6:	4653      	mov	r3, sl
 8002af8:	4632      	mov	r2, r6
 8002afa:	4621      	mov	r1, r4
 8002afc:	4640      	mov	r0, r8
 8002afe:	f7ff ff71 	bl	80029e4 <__ssputs_r>
 8002b02:	3001      	adds	r0, #1
 8002b04:	f000 80a4 	beq.w	8002c50 <_svfiprintf_r+0x1b8>
 8002b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b0a:	4453      	add	r3, sl
 8002b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b0e:	783b      	ldrb	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 809d 	beq.w	8002c50 <_svfiprintf_r+0x1b8>
 8002b16:	2300      	movs	r3, #0
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b20:	9304      	str	r3, [sp, #16]
 8002b22:	9307      	str	r3, [sp, #28]
 8002b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b28:	931a      	str	r3, [sp, #104]	; 0x68
 8002b2a:	462f      	mov	r7, r5
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002b32:	4850      	ldr	r0, [pc, #320]	; (8002c74 <_svfiprintf_r+0x1dc>)
 8002b34:	f000 fa30 	bl	8002f98 <memchr>
 8002b38:	9b04      	ldr	r3, [sp, #16]
 8002b3a:	b9d0      	cbnz	r0, 8002b72 <_svfiprintf_r+0xda>
 8002b3c:	06d9      	lsls	r1, r3, #27
 8002b3e:	bf44      	itt	mi
 8002b40:	2220      	movmi	r2, #32
 8002b42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b46:	071a      	lsls	r2, r3, #28
 8002b48:	bf44      	itt	mi
 8002b4a:	222b      	movmi	r2, #43	; 0x2b
 8002b4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b50:	782a      	ldrb	r2, [r5, #0]
 8002b52:	2a2a      	cmp	r2, #42	; 0x2a
 8002b54:	d015      	beq.n	8002b82 <_svfiprintf_r+0xea>
 8002b56:	462f      	mov	r7, r5
 8002b58:	2000      	movs	r0, #0
 8002b5a:	250a      	movs	r5, #10
 8002b5c:	9a07      	ldr	r2, [sp, #28]
 8002b5e:	4639      	mov	r1, r7
 8002b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b64:	3b30      	subs	r3, #48	; 0x30
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	d94d      	bls.n	8002c06 <_svfiprintf_r+0x16e>
 8002b6a:	b1b8      	cbz	r0, 8002b9c <_svfiprintf_r+0x104>
 8002b6c:	e00f      	b.n	8002b8e <_svfiprintf_r+0xf6>
 8002b6e:	462f      	mov	r7, r5
 8002b70:	e7b8      	b.n	8002ae4 <_svfiprintf_r+0x4c>
 8002b72:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <_svfiprintf_r+0x1dc>)
 8002b74:	463d      	mov	r5, r7
 8002b76:	1a80      	subs	r0, r0, r2
 8002b78:	fa0b f000 	lsl.w	r0, fp, r0
 8002b7c:	4318      	orrs	r0, r3
 8002b7e:	9004      	str	r0, [sp, #16]
 8002b80:	e7d3      	b.n	8002b2a <_svfiprintf_r+0x92>
 8002b82:	9a03      	ldr	r2, [sp, #12]
 8002b84:	1d11      	adds	r1, r2, #4
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	9103      	str	r1, [sp, #12]
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	db01      	blt.n	8002b92 <_svfiprintf_r+0xfa>
 8002b8e:	9207      	str	r2, [sp, #28]
 8002b90:	e004      	b.n	8002b9c <_svfiprintf_r+0x104>
 8002b92:	4252      	negs	r2, r2
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	9207      	str	r2, [sp, #28]
 8002b9a:	9304      	str	r3, [sp, #16]
 8002b9c:	783b      	ldrb	r3, [r7, #0]
 8002b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba0:	d10c      	bne.n	8002bbc <_svfiprintf_r+0x124>
 8002ba2:	787b      	ldrb	r3, [r7, #1]
 8002ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ba6:	d133      	bne.n	8002c10 <_svfiprintf_r+0x178>
 8002ba8:	9b03      	ldr	r3, [sp, #12]
 8002baa:	3702      	adds	r7, #2
 8002bac:	1d1a      	adds	r2, r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	9203      	str	r2, [sp, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bfb8      	it	lt
 8002bb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bba:	9305      	str	r3, [sp, #20]
 8002bbc:	4d2e      	ldr	r5, [pc, #184]	; (8002c78 <_svfiprintf_r+0x1e0>)
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	7839      	ldrb	r1, [r7, #0]
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 f9e8 	bl	8002f98 <memchr>
 8002bc8:	b138      	cbz	r0, 8002bda <_svfiprintf_r+0x142>
 8002bca:	2340      	movs	r3, #64	; 0x40
 8002bcc:	1b40      	subs	r0, r0, r5
 8002bce:	fa03 f000 	lsl.w	r0, r3, r0
 8002bd2:	9b04      	ldr	r3, [sp, #16]
 8002bd4:	3701      	adds	r7, #1
 8002bd6:	4303      	orrs	r3, r0
 8002bd8:	9304      	str	r3, [sp, #16]
 8002bda:	7839      	ldrb	r1, [r7, #0]
 8002bdc:	2206      	movs	r2, #6
 8002bde:	4827      	ldr	r0, [pc, #156]	; (8002c7c <_svfiprintf_r+0x1e4>)
 8002be0:	1c7e      	adds	r6, r7, #1
 8002be2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002be6:	f000 f9d7 	bl	8002f98 <memchr>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d038      	beq.n	8002c60 <_svfiprintf_r+0x1c8>
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <_svfiprintf_r+0x1e8>)
 8002bf0:	bb13      	cbnz	r3, 8002c38 <_svfiprintf_r+0x1a0>
 8002bf2:	9b03      	ldr	r3, [sp, #12]
 8002bf4:	3307      	adds	r3, #7
 8002bf6:	f023 0307 	bic.w	r3, r3, #7
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	9303      	str	r3, [sp, #12]
 8002bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c00:	444b      	add	r3, r9
 8002c02:	9309      	str	r3, [sp, #36]	; 0x24
 8002c04:	e76d      	b.n	8002ae2 <_svfiprintf_r+0x4a>
 8002c06:	fb05 3202 	mla	r2, r5, r2, r3
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	460f      	mov	r7, r1
 8002c0e:	e7a6      	b.n	8002b5e <_svfiprintf_r+0xc6>
 8002c10:	2300      	movs	r3, #0
 8002c12:	250a      	movs	r5, #10
 8002c14:	4619      	mov	r1, r3
 8002c16:	3701      	adds	r7, #1
 8002c18:	9305      	str	r3, [sp, #20]
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c20:	3a30      	subs	r2, #48	; 0x30
 8002c22:	2a09      	cmp	r2, #9
 8002c24:	d903      	bls.n	8002c2e <_svfiprintf_r+0x196>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0c8      	beq.n	8002bbc <_svfiprintf_r+0x124>
 8002c2a:	9105      	str	r1, [sp, #20]
 8002c2c:	e7c6      	b.n	8002bbc <_svfiprintf_r+0x124>
 8002c2e:	fb05 2101 	mla	r1, r5, r1, r2
 8002c32:	2301      	movs	r3, #1
 8002c34:	4607      	mov	r7, r0
 8002c36:	e7f0      	b.n	8002c1a <_svfiprintf_r+0x182>
 8002c38:	ab03      	add	r3, sp, #12
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <_svfiprintf_r+0x1ec>)
 8002c40:	a904      	add	r1, sp, #16
 8002c42:	4640      	mov	r0, r8
 8002c44:	f3af 8000 	nop.w
 8002c48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002c4c:	4681      	mov	r9, r0
 8002c4e:	d1d6      	bne.n	8002bfe <_svfiprintf_r+0x166>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	065b      	lsls	r3, r3, #25
 8002c54:	f53f af35 	bmi.w	8002ac2 <_svfiprintf_r+0x2a>
 8002c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c5a:	b01d      	add	sp, #116	; 0x74
 8002c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c60:	ab03      	add	r3, sp, #12
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4622      	mov	r2, r4
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <_svfiprintf_r+0x1ec>)
 8002c68:	a904      	add	r1, sp, #16
 8002c6a:	4640      	mov	r0, r8
 8002c6c:	f000 f882 	bl	8002d74 <_printf_i>
 8002c70:	e7ea      	b.n	8002c48 <_svfiprintf_r+0x1b0>
 8002c72:	bf00      	nop
 8002c74:	0800321c 	.word	0x0800321c
 8002c78:	08003222 	.word	0x08003222
 8002c7c:	08003226 	.word	0x08003226
 8002c80:	00000000 	.word	0x00000000
 8002c84:	080029e5 	.word	0x080029e5

08002c88 <_printf_common>:
 8002c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c8c:	4691      	mov	r9, r2
 8002c8e:	461f      	mov	r7, r3
 8002c90:	688a      	ldr	r2, [r1, #8]
 8002c92:	690b      	ldr	r3, [r1, #16]
 8002c94:	4606      	mov	r6, r0
 8002c96:	4293      	cmp	r3, r2
 8002c98:	bfb8      	it	lt
 8002c9a:	4613      	movlt	r3, r2
 8002c9c:	f8c9 3000 	str.w	r3, [r9]
 8002ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002caa:	b112      	cbz	r2, 8002cb2 <_printf_common+0x2a>
 8002cac:	3301      	adds	r3, #1
 8002cae:	f8c9 3000 	str.w	r3, [r9]
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	0699      	lsls	r1, r3, #26
 8002cb6:	bf42      	ittt	mi
 8002cb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cbc:	3302      	addmi	r3, #2
 8002cbe:	f8c9 3000 	strmi.w	r3, [r9]
 8002cc2:	6825      	ldr	r5, [r4, #0]
 8002cc4:	f015 0506 	ands.w	r5, r5, #6
 8002cc8:	d107      	bne.n	8002cda <_printf_common+0x52>
 8002cca:	f104 0a19 	add.w	sl, r4, #25
 8002cce:	68e3      	ldr	r3, [r4, #12]
 8002cd0:	f8d9 2000 	ldr.w	r2, [r9]
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	42ab      	cmp	r3, r5
 8002cd8:	dc29      	bgt.n	8002d2e <_printf_common+0xa6>
 8002cda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002cde:	6822      	ldr	r2, [r4, #0]
 8002ce0:	3300      	adds	r3, #0
 8002ce2:	bf18      	it	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	0692      	lsls	r2, r2, #26
 8002ce8:	d42e      	bmi.n	8002d48 <_printf_common+0xc0>
 8002cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cee:	4639      	mov	r1, r7
 8002cf0:	4630      	mov	r0, r6
 8002cf2:	47c0      	blx	r8
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d021      	beq.n	8002d3c <_printf_common+0xb4>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	68e5      	ldr	r5, [r4, #12]
 8002cfc:	f003 0306 	and.w	r3, r3, #6
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	bf18      	it	ne
 8002d04:	2500      	movne	r5, #0
 8002d06:	f8d9 2000 	ldr.w	r2, [r9]
 8002d0a:	f04f 0900 	mov.w	r9, #0
 8002d0e:	bf08      	it	eq
 8002d10:	1aad      	subeq	r5, r5, r2
 8002d12:	68a3      	ldr	r3, [r4, #8]
 8002d14:	6922      	ldr	r2, [r4, #16]
 8002d16:	bf08      	it	eq
 8002d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	bfc4      	itt	gt
 8002d20:	1a9b      	subgt	r3, r3, r2
 8002d22:	18ed      	addgt	r5, r5, r3
 8002d24:	341a      	adds	r4, #26
 8002d26:	454d      	cmp	r5, r9
 8002d28:	d11a      	bne.n	8002d60 <_printf_common+0xd8>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e008      	b.n	8002d40 <_printf_common+0xb8>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4652      	mov	r2, sl
 8002d32:	4639      	mov	r1, r7
 8002d34:	4630      	mov	r0, r6
 8002d36:	47c0      	blx	r8
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d103      	bne.n	8002d44 <_printf_common+0xbc>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7c2      	b.n	8002cce <_printf_common+0x46>
 8002d48:	2030      	movs	r0, #48	; 0x30
 8002d4a:	18e1      	adds	r1, r4, r3
 8002d4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d56:	4422      	add	r2, r4
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5e:	e7c4      	b.n	8002cea <_printf_common+0x62>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4622      	mov	r2, r4
 8002d64:	4639      	mov	r1, r7
 8002d66:	4630      	mov	r0, r6
 8002d68:	47c0      	blx	r8
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d0e6      	beq.n	8002d3c <_printf_common+0xb4>
 8002d6e:	f109 0901 	add.w	r9, r9, #1
 8002d72:	e7d8      	b.n	8002d26 <_printf_common+0x9e>

08002d74 <_printf_i>:
 8002d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	7e09      	ldrb	r1, [r1, #24]
 8002d80:	b085      	sub	sp, #20
 8002d82:	296e      	cmp	r1, #110	; 0x6e
 8002d84:	4617      	mov	r7, r2
 8002d86:	4606      	mov	r6, r0
 8002d88:	4698      	mov	r8, r3
 8002d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d8c:	f000 80b3 	beq.w	8002ef6 <_printf_i+0x182>
 8002d90:	d822      	bhi.n	8002dd8 <_printf_i+0x64>
 8002d92:	2963      	cmp	r1, #99	; 0x63
 8002d94:	d036      	beq.n	8002e04 <_printf_i+0x90>
 8002d96:	d80a      	bhi.n	8002dae <_printf_i+0x3a>
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	f000 80b9 	beq.w	8002f10 <_printf_i+0x19c>
 8002d9e:	2958      	cmp	r1, #88	; 0x58
 8002da0:	f000 8083 	beq.w	8002eaa <_printf_i+0x136>
 8002da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002da8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002dac:	e032      	b.n	8002e14 <_printf_i+0xa0>
 8002dae:	2964      	cmp	r1, #100	; 0x64
 8002db0:	d001      	beq.n	8002db6 <_printf_i+0x42>
 8002db2:	2969      	cmp	r1, #105	; 0x69
 8002db4:	d1f6      	bne.n	8002da4 <_printf_i+0x30>
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	6813      	ldr	r3, [r2, #0]
 8002dba:	0605      	lsls	r5, r0, #24
 8002dbc:	f103 0104 	add.w	r1, r3, #4
 8002dc0:	d52a      	bpl.n	8002e18 <_printf_i+0xa4>
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	da03      	bge.n	8002dd2 <_printf_i+0x5e>
 8002dca:	222d      	movs	r2, #45	; 0x2d
 8002dcc:	425b      	negs	r3, r3
 8002dce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dd2:	486f      	ldr	r0, [pc, #444]	; (8002f90 <_printf_i+0x21c>)
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	e039      	b.n	8002e4c <_printf_i+0xd8>
 8002dd8:	2973      	cmp	r1, #115	; 0x73
 8002dda:	f000 809d 	beq.w	8002f18 <_printf_i+0x1a4>
 8002dde:	d808      	bhi.n	8002df2 <_printf_i+0x7e>
 8002de0:	296f      	cmp	r1, #111	; 0x6f
 8002de2:	d020      	beq.n	8002e26 <_printf_i+0xb2>
 8002de4:	2970      	cmp	r1, #112	; 0x70
 8002de6:	d1dd      	bne.n	8002da4 <_printf_i+0x30>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	f043 0320 	orr.w	r3, r3, #32
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	e003      	b.n	8002dfa <_printf_i+0x86>
 8002df2:	2975      	cmp	r1, #117	; 0x75
 8002df4:	d017      	beq.n	8002e26 <_printf_i+0xb2>
 8002df6:	2978      	cmp	r1, #120	; 0x78
 8002df8:	d1d4      	bne.n	8002da4 <_printf_i+0x30>
 8002dfa:	2378      	movs	r3, #120	; 0x78
 8002dfc:	4865      	ldr	r0, [pc, #404]	; (8002f94 <_printf_i+0x220>)
 8002dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e02:	e055      	b.n	8002eb0 <_printf_i+0x13c>
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e0a:	1d19      	adds	r1, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6011      	str	r1, [r2, #0]
 8002e10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e14:	2301      	movs	r3, #1
 8002e16:	e08c      	b.n	8002f32 <_printf_i+0x1be>
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e1e:	6011      	str	r1, [r2, #0]
 8002e20:	bf18      	it	ne
 8002e22:	b21b      	sxthne	r3, r3
 8002e24:	e7cf      	b.n	8002dc6 <_printf_i+0x52>
 8002e26:	6813      	ldr	r3, [r2, #0]
 8002e28:	6825      	ldr	r5, [r4, #0]
 8002e2a:	1d18      	adds	r0, r3, #4
 8002e2c:	6010      	str	r0, [r2, #0]
 8002e2e:	0628      	lsls	r0, r5, #24
 8002e30:	d501      	bpl.n	8002e36 <_printf_i+0xc2>
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	e002      	b.n	8002e3c <_printf_i+0xc8>
 8002e36:	0668      	lsls	r0, r5, #25
 8002e38:	d5fb      	bpl.n	8002e32 <_printf_i+0xbe>
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	296f      	cmp	r1, #111	; 0x6f
 8002e3e:	bf14      	ite	ne
 8002e40:	220a      	movne	r2, #10
 8002e42:	2208      	moveq	r2, #8
 8002e44:	4852      	ldr	r0, [pc, #328]	; (8002f90 <_printf_i+0x21c>)
 8002e46:	2100      	movs	r1, #0
 8002e48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e4c:	6865      	ldr	r5, [r4, #4]
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	60a5      	str	r5, [r4, #8]
 8002e52:	f2c0 8095 	blt.w	8002f80 <_printf_i+0x20c>
 8002e56:	6821      	ldr	r1, [r4, #0]
 8002e58:	f021 0104 	bic.w	r1, r1, #4
 8002e5c:	6021      	str	r1, [r4, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d13d      	bne.n	8002ede <_printf_i+0x16a>
 8002e62:	2d00      	cmp	r5, #0
 8002e64:	f040 808e 	bne.w	8002f84 <_printf_i+0x210>
 8002e68:	4665      	mov	r5, ip
 8002e6a:	2a08      	cmp	r2, #8
 8002e6c:	d10b      	bne.n	8002e86 <_printf_i+0x112>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	07db      	lsls	r3, r3, #31
 8002e72:	d508      	bpl.n	8002e86 <_printf_i+0x112>
 8002e74:	6923      	ldr	r3, [r4, #16]
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	bfde      	ittt	le
 8002e7c:	2330      	movle	r3, #48	; 0x30
 8002e7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e86:	ebac 0305 	sub.w	r3, ip, r5
 8002e8a:	6123      	str	r3, [r4, #16]
 8002e8c:	f8cd 8000 	str.w	r8, [sp]
 8002e90:	463b      	mov	r3, r7
 8002e92:	aa03      	add	r2, sp, #12
 8002e94:	4621      	mov	r1, r4
 8002e96:	4630      	mov	r0, r6
 8002e98:	f7ff fef6 	bl	8002c88 <_printf_common>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d14d      	bne.n	8002f3c <_printf_i+0x1c8>
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea4:	b005      	add	sp, #20
 8002ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eaa:	4839      	ldr	r0, [pc, #228]	; (8002f90 <_printf_i+0x21c>)
 8002eac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002eb0:	6813      	ldr	r3, [r2, #0]
 8002eb2:	6821      	ldr	r1, [r4, #0]
 8002eb4:	1d1d      	adds	r5, r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6015      	str	r5, [r2, #0]
 8002eba:	060a      	lsls	r2, r1, #24
 8002ebc:	d50b      	bpl.n	8002ed6 <_printf_i+0x162>
 8002ebe:	07ca      	lsls	r2, r1, #31
 8002ec0:	bf44      	itt	mi
 8002ec2:	f041 0120 	orrmi.w	r1, r1, #32
 8002ec6:	6021      	strmi	r1, [r4, #0]
 8002ec8:	b91b      	cbnz	r3, 8002ed2 <_printf_i+0x15e>
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	f022 0220 	bic.w	r2, r2, #32
 8002ed0:	6022      	str	r2, [r4, #0]
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	e7b7      	b.n	8002e46 <_printf_i+0xd2>
 8002ed6:	064d      	lsls	r5, r1, #25
 8002ed8:	bf48      	it	mi
 8002eda:	b29b      	uxthmi	r3, r3
 8002edc:	e7ef      	b.n	8002ebe <_printf_i+0x14a>
 8002ede:	4665      	mov	r5, ip
 8002ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ee4:	fb02 3311 	mls	r3, r2, r1, r3
 8002ee8:	5cc3      	ldrb	r3, [r0, r3]
 8002eea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002eee:	460b      	mov	r3, r1
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d1f5      	bne.n	8002ee0 <_printf_i+0x16c>
 8002ef4:	e7b9      	b.n	8002e6a <_printf_i+0xf6>
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	6825      	ldr	r5, [r4, #0]
 8002efa:	1d18      	adds	r0, r3, #4
 8002efc:	6961      	ldr	r1, [r4, #20]
 8002efe:	6010      	str	r0, [r2, #0]
 8002f00:	0628      	lsls	r0, r5, #24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	d501      	bpl.n	8002f0a <_printf_i+0x196>
 8002f06:	6019      	str	r1, [r3, #0]
 8002f08:	e002      	b.n	8002f10 <_printf_i+0x19c>
 8002f0a:	066a      	lsls	r2, r5, #25
 8002f0c:	d5fb      	bpl.n	8002f06 <_printf_i+0x192>
 8002f0e:	8019      	strh	r1, [r3, #0]
 8002f10:	2300      	movs	r3, #0
 8002f12:	4665      	mov	r5, ip
 8002f14:	6123      	str	r3, [r4, #16]
 8002f16:	e7b9      	b.n	8002e8c <_printf_i+0x118>
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	1d19      	adds	r1, r3, #4
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	681d      	ldr	r5, [r3, #0]
 8002f20:	6862      	ldr	r2, [r4, #4]
 8002f22:	2100      	movs	r1, #0
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 f837 	bl	8002f98 <memchr>
 8002f2a:	b108      	cbz	r0, 8002f30 <_printf_i+0x1bc>
 8002f2c:	1b40      	subs	r0, r0, r5
 8002f2e:	6060      	str	r0, [r4, #4]
 8002f30:	6863      	ldr	r3, [r4, #4]
 8002f32:	6123      	str	r3, [r4, #16]
 8002f34:	2300      	movs	r3, #0
 8002f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3a:	e7a7      	b.n	8002e8c <_printf_i+0x118>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	462a      	mov	r2, r5
 8002f40:	4639      	mov	r1, r7
 8002f42:	4630      	mov	r0, r6
 8002f44:	47c0      	blx	r8
 8002f46:	3001      	adds	r0, #1
 8002f48:	d0aa      	beq.n	8002ea0 <_printf_i+0x12c>
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	079b      	lsls	r3, r3, #30
 8002f4e:	d413      	bmi.n	8002f78 <_printf_i+0x204>
 8002f50:	68e0      	ldr	r0, [r4, #12]
 8002f52:	9b03      	ldr	r3, [sp, #12]
 8002f54:	4298      	cmp	r0, r3
 8002f56:	bfb8      	it	lt
 8002f58:	4618      	movlt	r0, r3
 8002f5a:	e7a3      	b.n	8002ea4 <_printf_i+0x130>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	464a      	mov	r2, r9
 8002f60:	4639      	mov	r1, r7
 8002f62:	4630      	mov	r0, r6
 8002f64:	47c0      	blx	r8
 8002f66:	3001      	adds	r0, #1
 8002f68:	d09a      	beq.n	8002ea0 <_printf_i+0x12c>
 8002f6a:	3501      	adds	r5, #1
 8002f6c:	68e3      	ldr	r3, [r4, #12]
 8002f6e:	9a03      	ldr	r2, [sp, #12]
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	42ab      	cmp	r3, r5
 8002f74:	dcf2      	bgt.n	8002f5c <_printf_i+0x1e8>
 8002f76:	e7eb      	b.n	8002f50 <_printf_i+0x1dc>
 8002f78:	2500      	movs	r5, #0
 8002f7a:	f104 0919 	add.w	r9, r4, #25
 8002f7e:	e7f5      	b.n	8002f6c <_printf_i+0x1f8>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ac      	bne.n	8002ede <_printf_i+0x16a>
 8002f84:	7803      	ldrb	r3, [r0, #0]
 8002f86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f8e:	e76c      	b.n	8002e6a <_printf_i+0xf6>
 8002f90:	0800322d 	.word	0x0800322d
 8002f94:	0800323e 	.word	0x0800323e

08002f98 <memchr>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	b2c9      	uxtb	r1, r1
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4290      	cmp	r0, r2
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	d101      	bne.n	8002fa8 <memchr+0x10>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e003      	b.n	8002fb0 <memchr+0x18>
 8002fa8:	781c      	ldrb	r4, [r3, #0]
 8002faa:	3001      	adds	r0, #1
 8002fac:	428c      	cmp	r4, r1
 8002fae:	d1f6      	bne.n	8002f9e <memchr+0x6>
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <memmove>:
 8002fb4:	4288      	cmp	r0, r1
 8002fb6:	b510      	push	{r4, lr}
 8002fb8:	eb01 0302 	add.w	r3, r1, r2
 8002fbc:	d807      	bhi.n	8002fce <memmove+0x1a>
 8002fbe:	1e42      	subs	r2, r0, #1
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d00a      	beq.n	8002fda <memmove+0x26>
 8002fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002fcc:	e7f8      	b.n	8002fc0 <memmove+0xc>
 8002fce:	4283      	cmp	r3, r0
 8002fd0:	d9f5      	bls.n	8002fbe <memmove+0xa>
 8002fd2:	1881      	adds	r1, r0, r2
 8002fd4:	1ad2      	subs	r2, r2, r3
 8002fd6:	42d3      	cmn	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <memmove+0x28>
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fe0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002fe4:	e7f7      	b.n	8002fd6 <memmove+0x22>
	...

08002fe8 <_free_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	4605      	mov	r5, r0
 8002fec:	2900      	cmp	r1, #0
 8002fee:	d043      	beq.n	8003078 <_free_r+0x90>
 8002ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff4:	1f0c      	subs	r4, r1, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bfb8      	it	lt
 8002ffa:	18e4      	addlt	r4, r4, r3
 8002ffc:	f000 f8d0 	bl	80031a0 <__malloc_lock>
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <_free_r+0x94>)
 8003002:	6813      	ldr	r3, [r2, #0]
 8003004:	4610      	mov	r0, r2
 8003006:	b933      	cbnz	r3, 8003016 <_free_r+0x2e>
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	6014      	str	r4, [r2, #0]
 800300c:	4628      	mov	r0, r5
 800300e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003012:	f000 b8c6 	b.w	80031a2 <__malloc_unlock>
 8003016:	42a3      	cmp	r3, r4
 8003018:	d90b      	bls.n	8003032 <_free_r+0x4a>
 800301a:	6821      	ldr	r1, [r4, #0]
 800301c:	1862      	adds	r2, r4, r1
 800301e:	4293      	cmp	r3, r2
 8003020:	bf01      	itttt	eq
 8003022:	681a      	ldreq	r2, [r3, #0]
 8003024:	685b      	ldreq	r3, [r3, #4]
 8003026:	1852      	addeq	r2, r2, r1
 8003028:	6022      	streq	r2, [r4, #0]
 800302a:	6063      	str	r3, [r4, #4]
 800302c:	6004      	str	r4, [r0, #0]
 800302e:	e7ed      	b.n	800300c <_free_r+0x24>
 8003030:	4613      	mov	r3, r2
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	b10a      	cbz	r2, 800303a <_free_r+0x52>
 8003036:	42a2      	cmp	r2, r4
 8003038:	d9fa      	bls.n	8003030 <_free_r+0x48>
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	1858      	adds	r0, r3, r1
 800303e:	42a0      	cmp	r0, r4
 8003040:	d10b      	bne.n	800305a <_free_r+0x72>
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	4401      	add	r1, r0
 8003046:	1858      	adds	r0, r3, r1
 8003048:	4282      	cmp	r2, r0
 800304a:	6019      	str	r1, [r3, #0]
 800304c:	d1de      	bne.n	800300c <_free_r+0x24>
 800304e:	6810      	ldr	r0, [r2, #0]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	4401      	add	r1, r0
 8003054:	6019      	str	r1, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e7d8      	b.n	800300c <_free_r+0x24>
 800305a:	d902      	bls.n	8003062 <_free_r+0x7a>
 800305c:	230c      	movs	r3, #12
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	e7d4      	b.n	800300c <_free_r+0x24>
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1821      	adds	r1, r4, r0
 8003066:	428a      	cmp	r2, r1
 8003068:	bf01      	itttt	eq
 800306a:	6811      	ldreq	r1, [r2, #0]
 800306c:	6852      	ldreq	r2, [r2, #4]
 800306e:	1809      	addeq	r1, r1, r0
 8003070:	6021      	streq	r1, [r4, #0]
 8003072:	6062      	str	r2, [r4, #4]
 8003074:	605c      	str	r4, [r3, #4]
 8003076:	e7c9      	b.n	800300c <_free_r+0x24>
 8003078:	bd38      	pop	{r3, r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	20000430 	.word	0x20000430

08003080 <_malloc_r>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	1ccd      	adds	r5, r1, #3
 8003084:	f025 0503 	bic.w	r5, r5, #3
 8003088:	3508      	adds	r5, #8
 800308a:	2d0c      	cmp	r5, #12
 800308c:	bf38      	it	cc
 800308e:	250c      	movcc	r5, #12
 8003090:	2d00      	cmp	r5, #0
 8003092:	4606      	mov	r6, r0
 8003094:	db01      	blt.n	800309a <_malloc_r+0x1a>
 8003096:	42a9      	cmp	r1, r5
 8003098:	d903      	bls.n	80030a2 <_malloc_r+0x22>
 800309a:	230c      	movs	r3, #12
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	2000      	movs	r0, #0
 80030a0:	bd70      	pop	{r4, r5, r6, pc}
 80030a2:	f000 f87d 	bl	80031a0 <__malloc_lock>
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <_malloc_r+0xac>)
 80030a8:	6814      	ldr	r4, [r2, #0]
 80030aa:	4621      	mov	r1, r4
 80030ac:	b991      	cbnz	r1, 80030d4 <_malloc_r+0x54>
 80030ae:	4c20      	ldr	r4, [pc, #128]	; (8003130 <_malloc_r+0xb0>)
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	b91b      	cbnz	r3, 80030bc <_malloc_r+0x3c>
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 f863 	bl	8003180 <_sbrk_r>
 80030ba:	6020      	str	r0, [r4, #0]
 80030bc:	4629      	mov	r1, r5
 80030be:	4630      	mov	r0, r6
 80030c0:	f000 f85e 	bl	8003180 <_sbrk_r>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d124      	bne.n	8003112 <_malloc_r+0x92>
 80030c8:	230c      	movs	r3, #12
 80030ca:	4630      	mov	r0, r6
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	f000 f868 	bl	80031a2 <__malloc_unlock>
 80030d2:	e7e4      	b.n	800309e <_malloc_r+0x1e>
 80030d4:	680b      	ldr	r3, [r1, #0]
 80030d6:	1b5b      	subs	r3, r3, r5
 80030d8:	d418      	bmi.n	800310c <_malloc_r+0x8c>
 80030da:	2b0b      	cmp	r3, #11
 80030dc:	d90f      	bls.n	80030fe <_malloc_r+0x7e>
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	18cc      	adds	r4, r1, r3
 80030e2:	50cd      	str	r5, [r1, r3]
 80030e4:	4630      	mov	r0, r6
 80030e6:	f000 f85c 	bl	80031a2 <__malloc_unlock>
 80030ea:	f104 000b 	add.w	r0, r4, #11
 80030ee:	1d23      	adds	r3, r4, #4
 80030f0:	f020 0007 	bic.w	r0, r0, #7
 80030f4:	1ac3      	subs	r3, r0, r3
 80030f6:	d0d3      	beq.n	80030a0 <_malloc_r+0x20>
 80030f8:	425a      	negs	r2, r3
 80030fa:	50e2      	str	r2, [r4, r3]
 80030fc:	e7d0      	b.n	80030a0 <_malloc_r+0x20>
 80030fe:	684b      	ldr	r3, [r1, #4]
 8003100:	428c      	cmp	r4, r1
 8003102:	bf16      	itet	ne
 8003104:	6063      	strne	r3, [r4, #4]
 8003106:	6013      	streq	r3, [r2, #0]
 8003108:	460c      	movne	r4, r1
 800310a:	e7eb      	b.n	80030e4 <_malloc_r+0x64>
 800310c:	460c      	mov	r4, r1
 800310e:	6849      	ldr	r1, [r1, #4]
 8003110:	e7cc      	b.n	80030ac <_malloc_r+0x2c>
 8003112:	1cc4      	adds	r4, r0, #3
 8003114:	f024 0403 	bic.w	r4, r4, #3
 8003118:	42a0      	cmp	r0, r4
 800311a:	d005      	beq.n	8003128 <_malloc_r+0xa8>
 800311c:	1a21      	subs	r1, r4, r0
 800311e:	4630      	mov	r0, r6
 8003120:	f000 f82e 	bl	8003180 <_sbrk_r>
 8003124:	3001      	adds	r0, #1
 8003126:	d0cf      	beq.n	80030c8 <_malloc_r+0x48>
 8003128:	6025      	str	r5, [r4, #0]
 800312a:	e7db      	b.n	80030e4 <_malloc_r+0x64>
 800312c:	20000430 	.word	0x20000430
 8003130:	20000434 	.word	0x20000434

08003134 <_realloc_r>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	4607      	mov	r7, r0
 8003138:	4614      	mov	r4, r2
 800313a:	460e      	mov	r6, r1
 800313c:	b921      	cbnz	r1, 8003148 <_realloc_r+0x14>
 800313e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003142:	4611      	mov	r1, r2
 8003144:	f7ff bf9c 	b.w	8003080 <_malloc_r>
 8003148:	b922      	cbnz	r2, 8003154 <_realloc_r+0x20>
 800314a:	f7ff ff4d 	bl	8002fe8 <_free_r>
 800314e:	4625      	mov	r5, r4
 8003150:	4628      	mov	r0, r5
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003154:	f000 f826 	bl	80031a4 <_malloc_usable_size_r>
 8003158:	42a0      	cmp	r0, r4
 800315a:	d20f      	bcs.n	800317c <_realloc_r+0x48>
 800315c:	4621      	mov	r1, r4
 800315e:	4638      	mov	r0, r7
 8003160:	f7ff ff8e 	bl	8003080 <_malloc_r>
 8003164:	4605      	mov	r5, r0
 8003166:	2800      	cmp	r0, #0
 8003168:	d0f2      	beq.n	8003150 <_realloc_r+0x1c>
 800316a:	4631      	mov	r1, r6
 800316c:	4622      	mov	r2, r4
 800316e:	f7ff fc05 	bl	800297c <memcpy>
 8003172:	4631      	mov	r1, r6
 8003174:	4638      	mov	r0, r7
 8003176:	f7ff ff37 	bl	8002fe8 <_free_r>
 800317a:	e7e9      	b.n	8003150 <_realloc_r+0x1c>
 800317c:	4635      	mov	r5, r6
 800317e:	e7e7      	b.n	8003150 <_realloc_r+0x1c>

08003180 <_sbrk_r>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	2300      	movs	r3, #0
 8003184:	4c05      	ldr	r4, [pc, #20]	; (800319c <_sbrk_r+0x1c>)
 8003186:	4605      	mov	r5, r0
 8003188:	4608      	mov	r0, r1
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	f7fd fef8 	bl	8000f80 <_sbrk>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_sbrk_r+0x1a>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	b103      	cbz	r3, 800319a <_sbrk_r+0x1a>
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000614 	.word	0x20000614

080031a0 <__malloc_lock>:
 80031a0:	4770      	bx	lr

080031a2 <__malloc_unlock>:
 80031a2:	4770      	bx	lr

080031a4 <_malloc_usable_size_r>:
 80031a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031a8:	1f18      	subs	r0, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfbc      	itt	lt
 80031ae:	580b      	ldrlt	r3, [r1, r0]
 80031b0:	18c0      	addlt	r0, r0, r3
 80031b2:	4770      	bx	lr

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
